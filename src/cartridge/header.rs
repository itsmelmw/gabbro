use crate::cartridge::{Mbc, Mbc1, NoMbc};

/// Reads the title stored in the ROM, or `"Unknown"` if it fails.
pub fn get_title(rom: &[u8]) -> Result<String, &'static str> {
    String::from_utf8(rom[0x0134..0x0143].to_vec()).map_err(|_| "Invalid ROM title.")
}

/// Reads the version of the ROM.
pub fn get_version(rom: &[u8]) -> u8 {
    rom[0x014c]
}

/// Reads the number of ROM banks the ROM uses.
/// Returns `Err` if it is not a valid value.
pub fn get_rom_banks(rom: &[u8]) -> Result<usize, &'static str> {
    match rom[0x0148] {
        0x00 => Ok(2),
        0x01 => Ok(4),
        0x02 => Ok(8),
        0x03 => Ok(16),
        0x04 => Ok(32),
        0x05 => Ok(64),
        0x06 => Ok(128),
        0x07 => Ok(256),
        0x08 => Ok(512),
        // Unofficial?
        0x52 => Ok(72),
        0x53 => Ok(80),
        0x54 => Ok(96),
        _ => Err("Invalid number of ROM banks."),
    }
}

/// Reads the number of RAM banks the ROM uses.
/// Returns `Err` if it is not a valid value.
pub fn get_ram_banks(rom: &[u8]) -> Result<usize, &'static str> {
    match rom[0x0149] {
        0x00 => Ok(0),
        0x02 => Ok(1),
        0x03 => Ok(4),
        0x04 => Ok(16),
        0x05 => Ok(8),
        _ => Err("Invalid number of RAM banks."),
    }
}

/// Retrieves the memory bank controller the ROM uses.
pub fn get_mbc(
    rom: Vec<u8>,
    rom_banks: usize,
    _ram_banks: usize,
) -> Result<Box<dyn Mbc>, &'static str> {
    match rom[0x0147] {
        0x00 | 0x08 | 0x09 => Ok(Box::new(NoMbc::new(rom))),
        0x01..= 0x03 => Ok(Box::new(Mbc1::new(rom, rom_banks))),
        _ => Err("Invalid or unsupported MBC type. Only ROM-only and MBC1 cartridges are supported at the moment."),
    }
}

/// Reads the name of the licensee from the ROM.
/// Checks for both the old and the new format.
pub fn get_licensee(rom: &[u8]) -> Result<&'static str, &'static str> {
    match rom[0x014b] {
        0x00 => Ok("None"),
        0x01 => Ok("Nintendo"),
        0x08 => Ok("Capcom"),
        0x09 => Ok("Hot-B"),
        0x0a => Ok("Jaleco"),
        0x0b => Ok("Coconuts Japan"),
        0x0c => Ok("Elite Systems"),
        0x13 => Ok("EA (Electronic Arts)"),
        0x18 => Ok("Hudsonsoft"),
        0x19 => Ok("ITC Entertainment"),
        0x1a => Ok("Yanoman"),
        0x1d => Ok("Japan Clary"),
        0x1f => Ok("Virgin Interactive"),
        0x24 => Ok("PCM Complete"),
        0x25 => Ok("San-X"),
        0x28 => Ok("Kotobuki Systems"),
        0x29 => Ok("Seta"),
        0x30 => Ok("Infogrames"),
        0x31 => Ok("Nintendo"),
        0x32 => Ok("Bandai"),
        0x33 => get_licensee_new([rom[0x0144] as char, rom[0x0145] as char]),
        0x34 => Ok("Konami"),
        0x35 => Ok("HectorSoft"),
        0x38 => Ok("Capcom"),
        0x39 => Ok("Banpresto"),
        0x3c => Ok(".Entertainment i"),
        0x3e => Ok("Gremlin"),
        0x41 => Ok("Ubisoft"),
        0x42 => Ok("Atlus"),
        0x44 => Ok("Malibu"),
        0x46 => Ok("Angel"),
        0x47 => Ok("Spectrum Holoby"),
        0x49 => Ok("Irem"),
        0x4a => Ok("Virgin Interactive"),
        0x4d => Ok("Malibu"),
        0x4f => Ok("U.S. Gold"),
        0x50 => Ok("Absolute"),
        0x51 => Ok("Acclaim"),
        0x52 => Ok("Activision"),
        0x53 => Ok("American Sammy"),
        0x54 => Ok("GameTek"),
        0x55 => Ok("Park Place"),
        0x56 => Ok("LJN"),
        0x57 => Ok("Matchbox"),
        0x59 => Ok("Milton Bradley"),
        0x5a => Ok("Mindscape"),
        0x5b => Ok("Romstar"),
        0x5c => Ok("Naxat Soft"),
        0x5d => Ok("Tradewest"),
        0x60 => Ok("Titus"),
        0x61 => Ok("Virgin Interactive"),
        0x67 => Ok("Ocean Interactive"),
        0x69 => Ok("EA (Electronic Arts)"),
        0x6e => Ok("Elite Systems"),
        0x6f => Ok("Electro Brain"),
        0x70 => Ok("Infogrames"),
        0x71 => Ok("Interplay"),
        0x72 => Ok("Broderbund"),
        0x73 => Ok("Sculptered Soft"),
        0x75 => Ok("The Sales Curve"),
        0x78 => Ok("t.hq"),
        0x79 => Ok("Accolade"),
        0x7a => Ok("Triffix Entertainment"),
        0x7c => Ok("Microprose"),
        0x7f => Ok("Kemco"),
        0x80 => Ok("Misawa Entertainment"),
        0x83 => Ok("Lozc"),
        0x86 => Ok("Tokuma Shoten Intermedia"),
        0x8b => Ok("Bullet-Proof Software"),
        0x8c => Ok("Vic Tokai"),
        0x8e => Ok("Ape"),
        0x8f => Ok("I’Max"),
        0x91 => Ok("Chunsoft Co."),
        0x92 => Ok("Video System"),
        0x93 => Ok("Tsubaraya Productions Co."),
        0x95 => Ok("Varie Corporation"),
        0x96 => Ok("Yonezawa/S’Pal"),
        0x97 => Ok("Kaneko"),
        0x99 => Ok("Arc"),
        0x9a => Ok("Nihon Bussan"),
        0x9b => Ok("Tecmo"),
        0x9c => Ok("Imagineer"),
        0x9d => Ok("Banpresto"),
        0x9f => Ok("Nova"),
        0xa1 => Ok("Hori Electric"),
        0xa2 => Ok("Bandai"),
        0xa4 => Ok("Konami"),
        0xa6 => Ok("Kawada"),
        0xa7 => Ok("Takara"),
        0xa9 => Ok("Technos Japan"),
        0xaa => Ok("Broderbund"),
        0xac => Ok("Toei Animation"),
        0xad => Ok("Toho"),
        0xaf => Ok("Namco"),
        0xb0 => Ok("acclaim"),
        0xb1 => Ok("ASCII or Nexsoft"),
        0xb2 => Ok("Bandai"),
        0xb4 => Ok("Square Enix"),
        0xb6 => Ok("HAL Laboratory"),
        0xb7 => Ok("SNK"),
        0xb9 => Ok("Pony Canyon"),
        0xba => Ok("Culture Brain"),
        0xbb => Ok("Sunsoft"),
        0xbd => Ok("Sony Imagesoft"),
        0xbf => Ok("Sammy"),
        0xc0 => Ok("Taito"),
        0xc2 => Ok("Kemco"),
        0xc3 => Ok("Squaresoft"),
        0xc4 => Ok("Tokuma Shoten Intermedia"),
        0xc5 => Ok("Data East"),
        0xc6 => Ok("Tonkinhouse"),
        0xc8 => Ok("Koei"),
        0xc9 => Ok("UFL"),
        0xca => Ok("Ultra"),
        0xcb => Ok("Vap"),
        0xcc => Ok("Use Corporation"),
        0xcd => Ok("Meldac"),
        0xce => Ok(".Pony Canyon or"),
        0xcf => Ok("Angel"),
        0xd0 => Ok("Taito"),
        0xd1 => Ok("Sofel"),
        0xd2 => Ok("Quest"),
        0xd3 => Ok("Sigma Enterprises"),
        0xd4 => Ok("ASK Kodansha Co."),
        0xd6 => Ok("Naxat Soft"),
        0xd7 => Ok("Copya System"),
        0xd9 => Ok("Banpresto"),
        0xda => Ok("Tomy"),
        0xdb => Ok("LJN"),
        0xdd => Ok("NCS"),
        0xde => Ok("Human"),
        0xdf => Ok("Altron"),
        0xe0 => Ok("Jaleco"),
        0xe1 => Ok("Towa Chiki"),
        0xe2 => Ok("Yutaka"),
        0xe3 => Ok("Varie"),
        0xe5 => Ok("Epcoh"),
        0xe7 => Ok("Athena"),
        0xe8 => Ok("Asmik ACE Entertainment"),
        0xe9 => Ok("Natsume"),
        0xea => Ok("King Records"),
        0xeb => Ok("Atlus"),
        0xec => Ok("Epic/Sony Records"),
        0xee => Ok("IGS"),
        0xf0 => Ok("A Wave"),
        0xf3 => Ok("Extreme Entertainment"),
        0xff => Ok("LJN"),
        _ => Err("Invalid licensee."),
    }
}

/// Reads the name of the licensee from the ROM in the new format.
fn get_licensee_new(new: [char; 2]) -> Result<&'static str, &'static str> {
    match new {
        ['0', '0'] => Ok("None"),
        ['0', '1'] => Ok("Nintendo R&D1"),
        ['0', '8'] => Ok("Capcom"),
        ['1', '3'] => Ok("Electronic Arts"),
        ['1', '8'] => Ok("Hudson Soft"),
        ['1', '9'] => Ok("b-ai"),
        ['2', '0'] => Ok("kss"),
        ['2', '2'] => Ok("pow"),
        ['2', '4'] => Ok("PCM Complete"),
        ['2', '5'] => Ok("san-x"),
        ['2', '8'] => Ok("Kemco Japan"),
        ['2', '9'] => Ok("seta"),
        ['3', '0'] => Ok("Viacom"),
        ['3', '1'] => Ok("Nintendo"),
        ['3', '2'] => Ok("Bandai"),
        ['3', '3'] => Ok("Ocean/Acclaim"),
        ['3', '4'] => Ok("Konami"),
        ['3', '5'] => Ok("Hector"),
        ['3', '7'] => Ok("Taito"),
        ['3', '8'] => Ok("Hudson"),
        ['3', '9'] => Ok("Banpresto"),
        ['4', '1'] => Ok("Ubi Soft"),
        ['4', '2'] => Ok("Atlus"),
        ['4', '4'] => Ok("Malibu"),
        ['4', '6'] => Ok("angel"),
        ['4', '7'] => Ok("Bullet-Proof"),
        ['4', '9'] => Ok("irem"),
        ['5', '0'] => Ok("Absolute"),
        ['5', '1'] => Ok("Acclaim"),
        ['5', '2'] => Ok("Activision"),
        ['5', '3'] => Ok("American sammy"),
        ['5', '4'] => Ok("Konami"),
        ['5', '5'] => Ok("Hi tech entertainment"),
        ['5', '6'] => Ok("LJN"),
        ['5', '7'] => Ok("Matchbox"),
        ['5', '8'] => Ok("Mattel"),
        ['5', '9'] => Ok("Milton Bradley"),
        ['6', '0'] => Ok("Titus"),
        ['6', '1'] => Ok("Virgin"),
        ['6', '4'] => Ok("LucasArts"),
        ['6', '7'] => Ok("Ocean"),
        ['6', '9'] => Ok("Electronic Arts"),
        ['7', '0'] => Ok("Infogrames"),
        ['7', '1'] => Ok("Interplay"),
        ['7', '2'] => Ok("Broderbund"),
        ['7', '3'] => Ok("sculptured"),
        ['7', '5'] => Ok("sci"),
        ['7', '8'] => Ok("THQ"),
        ['7', '9'] => Ok("Accolade"),
        ['8', '0'] => Ok("misawa"),
        ['8', '3'] => Ok("lozc"),
        ['8', '6'] => Ok("Tokuma Shoten Intermedia"),
        ['8', '7'] => Ok("Tsukuda Original"),
        ['9', '1'] => Ok("Chunsoft"),
        ['9', '2'] => Ok("Video system"),
        ['9', '3'] => Ok("Ocean/Acclaim"),
        ['9', '5'] => Ok("Varie"),
        ['9', '6'] => Ok("Yonezawa/s’pal"),
        ['9', '7'] => Ok("Kaneko"),
        ['9', '9'] => Ok("Pack in soft"),
        ['A', '4'] => Ok("Konami (Yu-Gi-Oh!)"),
        _ => Err("Invalid licensee."),
    }
}
